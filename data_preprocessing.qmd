---
title: "Luxrug Sales Data Dashboard Data Preprocessing"
subtitle: ""
format: 
  html:
    self-contained: true
author:
- Ziyan Wang
- Jiashen Wang
---
```{r, echo=FALSE}
# setup
library(knitr)
library(dplyr)
library(tidyr)
library(stringr)
```

```{r, echo=FALSE}
# read monthly orders datasets
raw_2410 <- read.delim("www/order_202410.txt")
raw_2411 <- read.delim("www/order_202411.txt")
raw_2412 <- read.delim("www/order_202412.txt")
raw_2501 <- read.delim("www/order_202501.txt")
raw_2502 <- read.delim("www/order_202502.txt")
raw_2503 <- read.delim("www/order_202503.txt")
# combine two into one
raw_combined <- rbind(raw_2410, raw_2411, raw_2412, raw_2501, raw_2502, raw_2503)
```

```{r, echo=FALSE}
orders_combined <- raw_combined |>
  # this code chunk creates a tidied version of the sales data provided
  # date format
  mutate(
   purchase.date = as.POSIXct(
     purchase.date, 
     format="%Y-%m-%dT%H:%M:%S", 
     tz="UTC" 
   )
  ) |>
  
  mutate( # compute revenue
    revenue = item.price - coalesce(item.promotion.discount, 0) # no discount
  ) |>
  # only look at orders for the US, sold through Amazon and confirmed items
  filter(
    item.status != "Cancelled", # filter confirmed items (i.e. not Cancelled)
    sales.channel == "Amazon.com",
    ship.country == "US"
  ) |>
  
  # in the data provided, one SKU is incorrectly named, need to rename
  # G24267-1A should be G24268-1A 
  mutate(
    sku = str_replace(sku, "G24267-1A", "G24268-1A")
  ) |>
  # extract item size
  mutate(
    size = regmatches(
      sku, 
      regexpr("[0-9]x[0-9]+", sku)
    ),
    # extract item pattern
    pattern = regmatches(
      sku, 
      regexpr("[A-Z]\\d+", sku)
    ),
    color = regmatches(
      sku, 
      regexpr("[A-Z][a-z]+ ?[A-Z]?[a-z]+", sku)
    )
  ) |>
  
  # removing columns that are not needed in the analysis
  select(
    -c(
      last.updated.date,
      sku,
      merchant.order.id,
      fulfillment.channel, 
      sales.channel,
      order.channel, 
      ship.service.level,
      product.name,
      item.status,
      currency,
      ship.country,
      gift.wrap.price, 
      gift.wrap.tax, 
      purchase.order.number, 
      price.designation,
      signature.confirmation.recommended,
      url,
      item.tax,
      shipping.tax,
      shipping.price,
      ship.promotion.discount,
      promotion.ids,
      is.business.order
    )
  )

colnames(orders_combined) = c("order_id", "date", "status", "asin", "quantity", 
                              "price", "discount", "city", "state", "zip", 
                              "revenue", "size", "pattern", "color")
```

```{r}
# since for this project, we are focusing on the aggregated information about 
# the revenue, we perform further preprocessing to create a dataframe that 
# can directly be used in the Shiny App

# read the sku reference table provided by client
sku_ref <- read.csv("www/sku_chart.csv")

# extract pattern, size, color
sku_ref <- sku_ref |>
  mutate(
    size = regmatches(
      sku, 
      regexpr("[0-9]x[0-9]+", sku)
    ),
    # extract item pattern
    pattern = regmatches(
      sku, 
      regexpr("[A-Z]\\d+", sku)
    ),
    color = regmatches(
      sku, 
      regexpr("[A-Z][a-z]+ ?[A-Z]?[a-z]+", sku)
    )
  ) |>
  select(-sku)

# create df of all combinations of state and product
state_patterns_colors <- cross_join(
      sku_ref,
      as.data.frame(state.abb)
    )

# compute total revenue based on the tidied sales data
revenue_data <- orders_combined |>
  mutate(
    date = as.Date(format(date, "%Y%m%d"), "%Y%m%d")
  ) |>
  rename(state.abb = state) |>
  group_by( # group by attributes that will be used in dashboard
    date, pattern, color, size, state.abb 
  ) |>
  summarise(
    total_revenue = sum(price),
    total_sales = sum(quantity)
  ) 

# date-state-product combination
all_dates_patterns <- crossing(
      date = unique(revenue_data$date),
      state_patterns_colors
    )

# left join date-state-product combination to make sure each product-state
# combination has an entry for all dates
revenue_data <- left_join(
  all_dates_patterns, 
  revenue_data, 
  by = join_by(date, pattern, color, size, state.abb),
  relationship = "many-to-many"
) |>
  mutate(
    total_revenue = coalesce(total_revenue, 0), # if NA replace by 0
    total_sales = coalesce(total_sales, 0)
  )

# save file to use in dashboard building
saveRDS(revenue_data, "www/revenue_summary_tidied.rds")
```

```{r}
# load, clean, and store returns data
returns <- read.csv("www/退货.csv")
returns_cols = c("return.date", "order.id","asin", "detailed.disposition", 
                "reason", "customer.comments")
returns = returns[,returns_cols]
colnames(returns) = c("date", "order_id", "asin", "disposition", 
                  "reason", "comments")
# format date
returns <- returns |>
  mutate(date = as.POSIXct(date, format="%Y-%m-%dT%H:%M:%S", tz="UTC"))
saveRDS(returns, "www/returns.rds")
```

```{r}
# load, clean, and store review data
reviews <- read.csv("www/reviews.csv", header = T)
# remove empty rows
reviews <- reviews[!is.na(reviews$rating), ]
# format date
reviews$date <- as.Date(reviews$date, format = "%m-%d-%Y")
saveRDS(returns, "www/reviews.rds")
```
